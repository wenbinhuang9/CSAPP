#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	irmovq $7,%rbx      #  preserve odd bit of len 
	andq %rdx, %rbx   
	subq %rbx, %rdx     # if it is odd, mins 1
	andq %rdx,%rdx		# len <= 0?
	jle Remainder		# if so, goto Done:
	
Loop:	
        mrmovq (%rdi), %r8
        mrmovq 8(%rdi), %r9
        mrmovq 16(%rdi), %r10
        mrmovq 24(%rdi), %r11
        mrmovq 32(%rdi), %r12
        mrmovq 40(%rdi), %r13
        mrmovq 48(%rdi), %r14
        mrmovq 56(%rdi), %rcx
        rmmovq %r8, (%rsi)
        rmmovq %r9, 8(%rsi)
        rmmovq %r10, 16(%rsi)
        rmmovq %r11, 24(%rsi)
        rmmovq %r12, 32(%rsi)
        rmmovq %r13, 40(%rsi)
        rmmovq %r14, 48(%rsi)
        rmmovq %rcx, 56(%rsi)

ele1:   andq %r8, %r8           # val <= 0?
        jle ele2:               # if so, goto ele1:
        iaddq $1, %rax          # count++, %rax         
ele2:   andq %r9, %r9          
        jle ele3:
        iaddq $1, %rax
ele3:   andq %r10, %r10
        jle ele4:
        iaddq $1, %rax
ele4:   andq %r11, %r11
        jle ele5:
        iaddq $1, %rax
ele5:   andq %r12, %r12
        jle ele6:
        iaddq $1, %rax
ele6:   andq %r13, %r13
        jle ele7:
        iaddq $1, %rax
ele7:   andq %r14, %r14
        jle ele8:
        iaddq $1, %rax
ele8:   andq %rcx, %rcx
        jle Npos:
        iaddq $1, %rax

Npos:	
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++

	iaddq $-8, %rdx		# len -= 2
	jne Loop			# if so, goto Loop:

Remainder:
andq %rbx, %rbx
jle Done  # %rbx == 0

Loop2:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++	
Npos2:
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++	
	iaddq $-1, %rbx
	jne Loop2
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:	
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
